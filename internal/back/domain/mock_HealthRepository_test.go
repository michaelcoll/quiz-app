/*
 * Copyright (c) 2023 MichaÃ«l COLL.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockHealthRepository is an autogenerated mock type for the HealthRepository type
type MockHealthRepository struct {
	mock.Mock
}

type MockHealthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHealthRepository) EXPECT() *MockHealthRepository_Expecter {
	return &MockHealthRepository_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: ctx
func (_m *MockHealthRepository) Ping(ctx context.Context) bool {
	ret := _m.Called(ctx)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockHealthRepository_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockHealthRepository_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockHealthRepository_Expecter) Ping(ctx interface{}) *MockHealthRepository_Ping_Call {
	return &MockHealthRepository_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockHealthRepository_Ping_Call) Run(run func(ctx context.Context)) *MockHealthRepository_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockHealthRepository_Ping_Call) Return(_a0 bool) *MockHealthRepository_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockHealthRepository_Ping_Call) RunAndReturn(run func(context.Context) bool) *MockHealthRepository_Ping_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockHealthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockHealthRepository creates a new instance of MockHealthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockHealthRepository(t mockConstructorTestingTNewMockHealthRepository) *MockHealthRepository {
	mock := &MockHealthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
