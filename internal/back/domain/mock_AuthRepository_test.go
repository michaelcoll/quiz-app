// Code generated by mockery v2.20.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CacheToken provides a mock function with given fields: token
func (_m *MockAuthRepository) CacheToken(token *IdToken) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(*IdToken) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_CacheToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CacheToken'
type MockAuthRepository_CacheToken_Call struct {
	*mock.Call
}

// CacheToken is a helper method to define mock.On call
//   - token *IdToken
func (_e *MockAuthRepository_Expecter) CacheToken(token interface{}) *MockAuthRepository_CacheToken_Call {
	return &MockAuthRepository_CacheToken_Call{Call: _e.mock.On("CacheToken", token)}
}

func (_c *MockAuthRepository_CacheToken_Call) Run(run func(token *IdToken)) *MockAuthRepository_CacheToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*IdToken))
	})
	return _c
}

func (_c *MockAuthRepository_CacheToken_Call) Return(_a0 error) *MockAuthRepository_CacheToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_CacheToken_Call) RunAndReturn(run func(*IdToken) error) *MockAuthRepository_CacheToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrReplaceUser provides a mock function with given fields: ctx, user
func (_m *MockAuthRepository) CreateOrReplaceUser(ctx context.Context, user *User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_CreateOrReplaceUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrReplaceUser'
type MockAuthRepository_CreateOrReplaceUser_Call struct {
	*mock.Call
}

// CreateOrReplaceUser is a helper method to define mock.On call
//   - ctx context.Context
//   - user *User
func (_e *MockAuthRepository_Expecter) CreateOrReplaceUser(ctx interface{}, user interface{}) *MockAuthRepository_CreateOrReplaceUser_Call {
	return &MockAuthRepository_CreateOrReplaceUser_Call{Call: _e.mock.On("CreateOrReplaceUser", ctx, user)}
}

func (_c *MockAuthRepository_CreateOrReplaceUser_Call) Run(run func(ctx context.Context, user *User)) *MockAuthRepository_CreateOrReplaceUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*User))
	})
	return _c
}

func (_c *MockAuthRepository_CreateOrReplaceUser_Call) Return(_a0 error) *MockAuthRepository_CreateOrReplaceUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_CreateOrReplaceUser_Call) RunAndReturn(run func(context.Context, *User) error) *MockAuthRepository_CreateOrReplaceUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllUser provides a mock function with given fields: ctx
func (_m *MockAuthRepository) FindAllUser(ctx context.Context) ([]*User, error) {
	ret := _m.Called(ctx)

	var r0 []*User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*User, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_FindAllUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllUser'
type MockAuthRepository_FindAllUser_Call struct {
	*mock.Call
}

// FindAllUser is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAuthRepository_Expecter) FindAllUser(ctx interface{}) *MockAuthRepository_FindAllUser_Call {
	return &MockAuthRepository_FindAllUser_Call{Call: _e.mock.On("FindAllUser", ctx)}
}

func (_c *MockAuthRepository_FindAllUser_Call) Run(run func(ctx context.Context)) *MockAuthRepository_FindAllUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAuthRepository_FindAllUser_Call) Return(_a0 []*User, _a1 error) *MockAuthRepository_FindAllUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_FindAllUser_Call) RunAndReturn(run func(context.Context) ([]*User, error)) *MockAuthRepository_FindAllUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindTokenByTokenStr provides a mock function with given fields: tokenStr
func (_m *MockAuthRepository) FindTokenByTokenStr(tokenStr string) (*IdToken, error) {
	ret := _m.Called(tokenStr)

	var r0 *IdToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*IdToken, error)); ok {
		return rf(tokenStr)
	}
	if rf, ok := ret.Get(0).(func(string) *IdToken); ok {
		r0 = rf(tokenStr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*IdToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenStr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_FindTokenByTokenStr_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTokenByTokenStr'
type MockAuthRepository_FindTokenByTokenStr_Call struct {
	*mock.Call
}

// FindTokenByTokenStr is a helper method to define mock.On call
//   - tokenStr string
func (_e *MockAuthRepository_Expecter) FindTokenByTokenStr(tokenStr interface{}) *MockAuthRepository_FindTokenByTokenStr_Call {
	return &MockAuthRepository_FindTokenByTokenStr_Call{Call: _e.mock.On("FindTokenByTokenStr", tokenStr)}
}

func (_c *MockAuthRepository_FindTokenByTokenStr_Call) Run(run func(tokenStr string)) *MockAuthRepository_FindTokenByTokenStr_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_FindTokenByTokenStr_Call) Return(_a0 *IdToken, _a1 error) *MockAuthRepository_FindTokenByTokenStr_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_FindTokenByTokenStr_Call) RunAndReturn(run func(string) (*IdToken, error)) *MockAuthRepository_FindTokenByTokenStr_Call {
	_c.Call.Return(run)
	return _c
}

// FindUserById provides a mock function with given fields: ctx, id
func (_m *MockAuthRepository) FindUserById(ctx context.Context, id string) (*User, error) {
	ret := _m.Called(ctx, id)

	var r0 *User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAuthRepository_FindUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserById'
type MockAuthRepository_FindUserById_Call struct {
	*mock.Call
}

// FindUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAuthRepository_Expecter) FindUserById(ctx interface{}, id interface{}) *MockAuthRepository_FindUserById_Call {
	return &MockAuthRepository_FindUserById_Call{Call: _e.mock.On("FindUserById", ctx, id)}
}

func (_c *MockAuthRepository_FindUserById_Call) Run(run func(ctx context.Context, id string)) *MockAuthRepository_FindUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAuthRepository_FindUserById_Call) Return(_a0 *User, _a1 error) *MockAuthRepository_FindUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_FindUserById_Call) RunAndReturn(run func(context.Context, string) (*User, error)) *MockAuthRepository_FindUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserActive provides a mock function with given fields: ctx, id, active
func (_m *MockAuthRepository) UpdateUserActive(ctx context.Context, id string, active bool) error {
	ret := _m.Called(ctx, id, active)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, id, active)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_UpdateUserActive_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserActive'
type MockAuthRepository_UpdateUserActive_Call struct {
	*mock.Call
}

// UpdateUserActive is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - active bool
func (_e *MockAuthRepository_Expecter) UpdateUserActive(ctx interface{}, id interface{}, active interface{}) *MockAuthRepository_UpdateUserActive_Call {
	return &MockAuthRepository_UpdateUserActive_Call{Call: _e.mock.On("UpdateUserActive", ctx, id, active)}
}

func (_c *MockAuthRepository_UpdateUserActive_Call) Run(run func(ctx context.Context, id string, active bool)) *MockAuthRepository_UpdateUserActive_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockAuthRepository_UpdateUserActive_Call) Return(_a0 error) *MockAuthRepository_UpdateUserActive_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_UpdateUserActive_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockAuthRepository_UpdateUserActive_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserRole provides a mock function with given fields: ctx, userId, role
func (_m *MockAuthRepository) UpdateUserRole(ctx context.Context, userId string, role Role) error {
	ret := _m.Called(ctx, userId, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Role) error); ok {
		r0 = rf(ctx, userId, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAuthRepository_UpdateUserRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserRole'
type MockAuthRepository_UpdateUserRole_Call struct {
	*mock.Call
}

// UpdateUserRole is a helper method to define mock.On call
//   - ctx context.Context
//   - userId string
//   - role Role
func (_e *MockAuthRepository_Expecter) UpdateUserRole(ctx interface{}, userId interface{}, role interface{}) *MockAuthRepository_UpdateUserRole_Call {
	return &MockAuthRepository_UpdateUserRole_Call{Call: _e.mock.On("UpdateUserRole", ctx, userId, role)}
}

func (_c *MockAuthRepository_UpdateUserRole_Call) Run(run func(ctx context.Context, userId string, role Role)) *MockAuthRepository_UpdateUserRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(Role))
	})
	return _c
}

func (_c *MockAuthRepository_UpdateUserRole_Call) Return(_a0 error) *MockAuthRepository_UpdateUserRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAuthRepository_UpdateUserRole_Call) RunAndReturn(run func(context.Context, string, Role) error) *MockAuthRepository_UpdateUserRole_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockAuthRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockAuthRepository(t mockConstructorTestingTNewMockAuthRepository) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
