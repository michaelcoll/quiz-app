// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: quiz.sql

package sqlc

import (
	"context"
)

const activateOnlyVersion = `-- name: ActivateOnlyVersion :exec
UPDATE quiz
SET active = 0
WHERE filename = ?
AND version <> ?
`

type ActivateOnlyVersionParams struct {
	Filename string `db:"filename"`
	Version  int64  `db:"version"`
}

func (q *Queries) ActivateOnlyVersion(ctx context.Context, arg ActivateOnlyVersionParams) error {
	_, err := q.db.ExecContext(ctx, activateOnlyVersion, arg.Filename, arg.Version)
	return err
}

const createOrReplaceAnswer = `-- name: CreateOrReplaceAnswer :exec
REPLACE INTO quiz_answer (sha1, content, valid)
VALUES (?, ?, ?)
`

type CreateOrReplaceAnswerParams struct {
	Sha1    string `db:"sha1"`
	Content string `db:"content"`
	Valid   int64  `db:"valid"`
}

func (q *Queries) CreateOrReplaceAnswer(ctx context.Context, arg CreateOrReplaceAnswerParams) error {
	_, err := q.db.ExecContext(ctx, createOrReplaceAnswer, arg.Sha1, arg.Content, arg.Valid)
	return err
}

const createOrReplaceQuestion = `-- name: CreateOrReplaceQuestion :exec
REPLACE INTO quiz_question (sha1, content)
VALUES (?, ?)
`

type CreateOrReplaceQuestionParams struct {
	Sha1    string `db:"sha1"`
	Content string `db:"content"`
}

func (q *Queries) CreateOrReplaceQuestion(ctx context.Context, arg CreateOrReplaceQuestionParams) error {
	_, err := q.db.ExecContext(ctx, createOrReplaceQuestion, arg.Sha1, arg.Content)
	return err
}

const createOrReplaceQuiz = `-- name: CreateOrReplaceQuiz :exec
REPLACE INTO quiz (sha1, name, filename, version)
VALUES (?, ?, ?, ?)
`

type CreateOrReplaceQuizParams struct {
	Sha1     string `db:"sha1"`
	Name     string `db:"name"`
	Filename string `db:"filename"`
	Version  int64  `db:"version"`
}

func (q *Queries) CreateOrReplaceQuiz(ctx context.Context, arg CreateOrReplaceQuizParams) error {
	_, err := q.db.ExecContext(ctx, createOrReplaceQuiz,
		arg.Sha1,
		arg.Name,
		arg.Filename,
		arg.Version,
	)
	return err
}

const findBySha1 = `-- name: FindBySha1 :one
SELECT sha1, name, filename, version, active, created_at
FROM quiz
WHERE sha1 = ?
`

func (q *Queries) FindBySha1(ctx context.Context, sha1 string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, findBySha1, sha1)
	var i Quiz
	err := row.Scan(
		&i.Sha1,
		&i.Name,
		&i.Filename,
		&i.Version,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const findLatestVersionByFilename = `-- name: FindLatestVersionByFilename :one
SELECT sha1, name, filename, version, active, created_at
FROM quiz
WHERE filename = ?
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) FindLatestVersionByFilename(ctx context.Context, filename string) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, findLatestVersionByFilename, filename)
	var i Quiz
	err := row.Scan(
		&i.Sha1,
		&i.Name,
		&i.Filename,
		&i.Version,
		&i.Active,
		&i.CreatedAt,
	)
	return i, err
}

const linkAnswer = `-- name: LinkAnswer :exec
REPLACE INTO quiz_question_answer (question_sha1, answer_sha1)
VALUES (?, ?)
`

type LinkAnswerParams struct {
	QuestionSha1 string `db:"question_sha1"`
	AnswerSha1   string `db:"answer_sha1"`
}

func (q *Queries) LinkAnswer(ctx context.Context, arg LinkAnswerParams) error {
	_, err := q.db.ExecContext(ctx, linkAnswer, arg.QuestionSha1, arg.AnswerSha1)
	return err
}

const linkQuestion = `-- name: LinkQuestion :exec
REPLACE INTO quiz_question_quiz (quiz_sha1, question_sha1)
VALUES (?, ?)
`

type LinkQuestionParams struct {
	QuizSha1     string `db:"quiz_sha1"`
	QuestionSha1 string `db:"question_sha1"`
}

func (q *Queries) LinkQuestion(ctx context.Context, arg LinkQuestionParams) error {
	_, err := q.db.ExecContext(ctx, linkQuestion, arg.QuizSha1, arg.QuestionSha1)
	return err
}
