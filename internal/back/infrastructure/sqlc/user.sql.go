// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package sqlc

import (
	"context"
)

const createOrReplaceUser = `-- name: CreateOrReplaceUser :exec
REPLACE INTO user (id, login, name, picture, role_id)
VALUES (?, ?, ?, ?, ?)
`

type CreateOrReplaceUserParams struct {
	ID      string `db:"id"`
	Login   string `db:"login"`
	Name    string `db:"name"`
	Picture string `db:"picture"`
	RoleID  int8   `db:"role_id"`
}

func (q *Queries) CreateOrReplaceUser(ctx context.Context, arg CreateOrReplaceUserParams) error {
	_, err := q.db.ExecContext(ctx, createOrReplaceUser,
		arg.ID,
		arg.Login,
		arg.Name,
		arg.Picture,
		arg.RoleID,
	)
	return err
}

const findAllUser = `-- name: FindAllUser :many
SELECT id, login, name, picture, active, role_id, class_uuid
FROM user
`

func (q *Queries) FindAllUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, findAllUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Name,
			&i.Picture,
			&i.Active,
			&i.RoleID,
			&i.ClassUuid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUserById = `-- name: FindUserById :one
SELECT id, login, name, picture, active, role_id, class_uuid
FROM user
WHERE id = ?
`

func (q *Queries) FindUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Name,
		&i.Picture,
		&i.Active,
		&i.RoleID,
		&i.ClassUuid,
	)
	return i, err
}

const updateUserActive = `-- name: UpdateUserActive :exec
UPDATE user
SET active = ?
WHERE id = ?
`

type UpdateUserActiveParams struct {
	Active bool   `db:"active"`
	ID     string `db:"id"`
}

func (q *Queries) UpdateUserActive(ctx context.Context, arg UpdateUserActiveParams) error {
	_, err := q.db.ExecContext(ctx, updateUserActive, arg.Active, arg.ID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :exec
UPDATE user
SET role_id = ?
WHERE id = ?
`

type UpdateUserRoleParams struct {
	RoleID int8   `db:"role_id"`
	ID     string `db:"id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, updateUserRole, arg.RoleID, arg.ID)
	return err
}
